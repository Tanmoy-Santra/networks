pipe
----
pipe is a interpoces communiation . occur in half duplex mode . 2 end communication ,one end write and another write not a same time. each occur at a time .

fd (file descripter value)
--------------------------
fd[1]-->write fd[0]-->read 

What is fd in file handling?

In Unix and Unix-like computer operating systems, a file descriptor (FD, less frequently fildes) is a process-unique identifier (handle) for a file or other input/output resource, such as a pipe or network socket.

Common File Descriptor Values:

0: Standard input (stdin).
1: Standard output (stdout).
2: Standard error (stderr)

process 
-------------
A process is an instance of a running program. It is the execution context within which a program runs, including its code, data, resources, and state. Here are the key aspects and components of a process:


======================================================================================================

sys/socket.h, sys/types.h: For socket-related functions and data types.
netinet/in.h: For sockaddr_in structure and constants.
arpa/inet.h: For functions to manipulate IP addresses.

sockaddr_in client, server: Structures to hold client and server address information.

tcp UDP
=======
TCP (Transmission Control Protocol) is connection-oriented and reliable, ensuring ordered and error-checked data delivery, while UDP (User Datagram Protocol) is connectionless and faster, but does not guarantee delivery, order, or error-checking.

bzero Function
---------------

 bzero((char*)&server, sizeof(server));

The bzero function is used to set a block of memory to zero. It is defined in the <strings.h> header, and its prototype is:
void bzero(void *s, size_t n);
s: Pointer to the memory block to be filled with zeros.
n: Number of bytes to set to zero.

bzero((char*)&client, sizeof(client)): Zeroes out the client structure.
client.sin_family = AF_INET: Specifies the address family (IPv4).
client.sin_addr.s_addr = inet_addr(CLIENT_IP): Sets the client IP address.
client.sin_port = htons(CLIENT_PORT): Sets the client port number (converted to network byte order).
---------------------------------------------------------------------------------------------------
socket
-------
A socket is one endpoint of a two way communication link between two programs running on the network. The socket mechanism provides a means of inter-process communication (IPC) by establishing named contact points between which the communication take place. 

Like ‘Pipe’ is used to create pipes and sockets is created using ‘socket’ system call. The socket provides bidirectional FIFO Communication facility over the network. 


connect
-------
connect(sd, (struct sockaddr*)&server, sizeof(server));
connect Function:

The connect function establishes a connection to a specified server using the socket file descriptor returned by socket.
Parameters:

sd: The socket file descriptor created by the socket function.
(struct sockaddr*)&server: A pointer to a sockaddr structure (cast to struct sockaddr*) that contains the server's address and port information. In this case, server is a sockaddr_in structure that specifies the IPv4 address and port of the server.
sizeof(server): The size of the server structure, which is passed to inform the connect function of the length of the address structure.

The memset
----------
 function is used to set a block of memory to a specified value. It is part of the C standard library and is declared in the <string.h> header file. Here's a detailed explanation:

memset Function
Prototype
void *memset(void *s, int c, size_t n);
Parameters
s: A pointer to the memory block to be set.
c: The value to be set. This is passed as an int, but it is internally converted to an unsigned char and set to each byte of the memory block.
n: The number of bytes to be set to the value

recv
----
In networking, the function call recv(nsd, str, 512, 0) is used in socket programming to receive data from a network socket.

sockfd: Socket file descriptor.
buf: Buffer to receive the data.
len: Length of the buffer.
flags: Flags to modify the behavior of the function.

send
----
send(sd, str, strlen(str)+1, 0);

sockfd: Socket file descriptor.
buf: Buffer containing the data to be sent.
len: Length of the data in the buffer.
flags: Flags to modify the behavior of the function.

strlen(str)+1 => strlen(str) calculates the length of the string str without including the null terminator.
Adding +1 to strlen(str) ensures that the null terminator is included in the data being sent.
-------------

sendto
------
sendto(sd,str,strlen(str)+1,0,(struct sockaddr*)&server,sizeof(server));

sockfd: Socket file descriptor.
buf: Buffer containing the data to be sent.
len: Length of the data in the buffer.
flags: Flags to modify the behavior of the function.
dest_addr: Pointer to a struct sockaddr containing the destination address.
addrlen: Size of the address structure.


recvfrom
--------
recvfrom(sd,str,512,0,(struct sockaddr*)&client,&clen);

sockfd: Socket file descriptor.
buf: Buffer to receive the data.
len: Length of the buffer.
flags: Flags to modify the behavior of the function.
src_addr: Pointer to a struct sockaddr that will be filled with the sender's address.
addrlen: Pointer to a variable containing the size of the src_addr structure. This variable is updated with the actual size of the sender's address.


inet_ntoa()
-----------
The function inet_ntoa() converts a network address in a struct in_addr to a dots-and-numbers format string

inet_aton()
----------
The function inet_aton() is the opposite, converting from a dots-and-numbers string into a in_addr_t (which is the type of the field s_addr in your struct in_addr.)

inet_addr()
-----------
 the function inet_addr() is an older function that does basically the same thing as inet_aton(). 

 htons() ---translates an unsigned short integer into network byte order.
 ntohs()--- translates an unsigned short integer into host byte order.
